<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  <link xlink:href='https://github.com/Samate99/Hello-world/tree/master/Prog1/Turing/Loop'>https://github.com/Samate99/Hello-world/tree/master/Prog1/Turing/Loop</link>              
        </para>
        <para>
            Ahhoz hogy egy processzormagot 100%-on dolgoztassunk egy  végtelen ciklusra van szükségünk . Jelen esetben egy While ciklust láthatunk . 
            A következő esetben hogy minden magot megdolgoztassunk kelleni fog az OpenMP! Itt includeolnunk kell a omp.h könyvtárat illetve a ciklusunkat a #pragma omp paralell függvényben kell elhelyeznünk . 
            Végül pedig hogy egy mag se dolgozzon egy egyszerü sleep függvényt kell alkalmazunk illetve includeolni kell az unistd.h könyvtárat.
        </para> 
         <programlisting language="c"><![CDATA[

int main() { 
while(1){}

   return 0;

}
}]]></programlisting>        
 <para>
     Tehát itt lathatjuk az első megoldását ! Itt egyetlen egy magot terhelünk 100%ban , nincs is másra szükségünk csak egy egyszerű while ciklus alkalmazására.
</para>
 <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <omp.h>



int main() {

        #pragma omp parallel 
           while(1){}
        
        return 0;

}
}]]></programlisting>   

 <para>
    A feladat második részében láthatjuk hogy a feladat megfelelő megoldásához incluleoldni kellett egy konyvtárat névszerint az om.h konytarat . Ezutan nincs is másra szükségünk csak a while programunka a while ciklus elé be kell illesztenünk a #pargma omp paraallel függvényt.
    Ennek segítségével egyszerűen tudjuk dolgoztatni az összes magot a számítógépünkben.
</para>


 <programlisting language="c"><![CDATA[
include <unistd.h>

int main() {
  while(1) {
    sleep(1);

  }

}]]></programlisting> 

 <para>
    Az utolsó részben az volt a feladat hogy egy magot 0 %ban dolgoztassunk. Ez is egy viszonylag egyszeru feladat nincs másra szükségünk mint a sleep funkcióra ennek a programba való beilleszétésével elérhetjük hogy egy magunk 0%ban dolgozzon
</para>
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
             Velemenyem szerint Nem tudunk olyan programot írni amely képes egy előrre megírt programról meghatorizni hogy az a program
             képes lesz e a lefutásra vagy nem lesz e kepes azaz le fog fagyni.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            használata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:  <link xlink:href='https://github.com/Samate99/Hello-world/blob/master/Prog1/Turing/valtozocsere'>https://github.com/Samate99/Hello-world/blob/master/Prog1/Turing/valtozocsere</link> 
        </para>

        <para>
            2  változó felcserélésére többféle módszer alkalmazható . Mintpeldaul hasznalhatunk egy segédvaltozót vagy különböző muveletekkel is megoldható a feladat.
            Én személy szerint a második opciót választottam es különböző matematikai müveletek segítésével oldottam meg a feladatot ! Lássuk is hogy mükik a kód. 
             Tehát Van 2 változónk az a és a b ! 
             Az első váltózó azaz az a helyére felvesszük az a+b összegét azaz az első változó + a második változó összegét .
             Utána a b helyére felvesszük a-b összegét tehat az a kezdőértéke átkerült a b-be ! Ezután az a valtozóba berakjuk az a-b összegét tehát az (a+b)-((a+b)-b) összegét  ezzel pedig a b kezdőértéke átkerült az a-ba. 
        </para>
        <programlisting language="c"><![CDATA[
        
#include <stdio.h>

  int main() {

         int a = 6;
         int b = 2;

         printf("a = %d ", a);
         printf("b = %d \n", b);

         a = a+b;
         b = a-b;
         a = a-b;

         printf("a = %d ", a);
         printf("b = %d \n", b);

}
}]]></programlisting>        
    </section>                     
    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, az alábbi videókon láthatod.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href='https://github.com/Samate99/Hello-world/blob/master/Prog1/Turing/labda'>https://github.com/Samate99/Hello-world/blob/master/Prog1/Turing/labda</link>  
        </para>
        <para>
            A feladatunk a labdapattogás feladat lesz . Velemenyem szerint ezzel a feladatban
a bevprog során mindenki talalkozott hisz tobbszor is előkerült mind a sima mind az Ifes változata
A kódot olvasva lathatjuk hogy több mindent is deklarálnunk kell.
Meg kell adnunk a labda kezdőhelyzetét ezen felül az ablak méretét illetve 
a labda mozgásának pattogásának mértékét. Ahogy lathatjuk a kódban 
egész sok függvényt fogunk alkalmazni ilyen peldaul a refresh ami a nevéből adódóan a program
frissítéséért felel ilyen a getmaxyx() amelyel a Dinamikusságot adjuk a programnak vagy
eppen ilyen a mvprintw() aminek segítségével magát a labdát rajzoltatjuk ki vagy ilyen az uspeel()
amelyel a labdánk gyorsaságát allíthatjuk be es tovabba ott van meg az initscr függvény is amelyel
a terminal méretétével van kapcsolatban . A Maga  program az IF függvények hasznalataval allapítja meg
hogy eppen elerte e a labda az adott meretu terminal valamelyik szélét . Ha elérte akkor a labda irányt vált 
        </para>
        <programlisting language="c"><![CDATA[
        // nem sajat kód
        #include <stdio.h>
#include <curses.h>
#include <unistd.h>
int main ( void )

{
    WINDOW *ablak;
    ablak = initscr();

    int x = 0;
    int y = 0;

    int xnov = 1;
    int ynov = 1;

    int mx;
    int my;

   for ( ;; ) {
        getmaxyx ( ablak, my , mx );
        mvprintw ( y, x, "O" );
        refresh ();
        usleep ( 100000 );

        x = x + xnov;

        y = y + ynov;

        if ( x>=mx-1 ) { // elerte-e a jobb oldalt?
            xnov = xnov * -1;
        }
        if ( x<=0 ) { // elerte-e a bal oldalt?
            xnov = xnov * -1;
       }
        if ( y<=0 ) { // 
            ynov = ynov * -1;
        }
        if ( y>=my-1 ) { 
            ynov = ynov * -1;
        }
    }
    return 0;

}
}]]></programlisting>        
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href='https://github.com/Samate99/Hello-world/blob/master/Prog1/Turing/shift.c'>https://github.com/Samate99/Hello-world/blob/master/Prog1/Turing/shift.c</link> 
        </para>
        <para>
            Tehat ebben a megoldasban a Bitshift nevezetű operatorral fogunk dolgozni. Ahogy lathatjuk a megoldas során Shiftelésre leszünk szükésgünk . 
            Ez azt jelenti hogy folyamatosan haladunk egy adott iranyban.
            Ezt jelen esetben egy while ciklust használva fogunk megcsinalni de lehetne akar más ciklust is alkalmazni   . Miutan a elshifteljük 0hoz es sikeres volt a
            muvelet illetve nem vétettünk hibat gyakorlatilag megkapjuk a szó méretét bitben
        </para>
           <programlisting language="c"><![CDATA[    
        #include <stdio.h>

int main() {
    int i = 1;
    int a = 0;
      while (i != 0) {
      i <<= 1;
      a++;
    }

    printf("Szóhossz: %d bit\n",a);

}
}]]></programlisting>  
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó:  
        </para>
        <para>
            Megoldás forrása: <link xlink:href='https://github.com/Samate99/Hello-world/blob/master/Prog1/Turing/Pagerank'>https://github.com/Samate99/Hello-world/blob/master/Prog1/Turing/Pagerank</link>
        </para>
        <para>
            Szóval a Page-Rank Maga egy algoritmus amely forradalmasította illetve a mai napig meghatározza az interneten való keresést ! A legtobb keresésre specializalódott oldal ezt használja többet között
            a google is , nemcsoda hisz a Google 2 alapítója hozta létre ezt az algoritmust még annó 98'ba egyetemi tanulmanyaik során stanford városában
            Ennek segítségével kapunk számunkra megfelelő releváns oldalakat a kereséseink során !A rendszer ugy működik hogy a PageRank rendszer alapjan listázza ki az oldalakat és ennek alapjan
            Hozza fel az oldalakat a keresők számára!
            A rendszer szerint amelyik oldalra többen kiváncsiak azaz  hivatkoznak és kattintanak  rá tehát nagy
            a népszerúsége  ezáltal nagyon magas a Pagerankja .
            A Programunk ugy nez ki hogy van egy vegtelen ciklusunk ami gyakorlatilag a végtelenségig fut . Ebben található egy feltétel . A ciklus azonnal  megszunik amint a feltetelben emlitett tavolsag kisebb mint 0.00000001. 
            A megoldáshoz mátrixokat és vektorokat kell allkalmaznunk.A program az adatokat letarolja  egy  matrixba ami megmutatja az oldalak közötti helyes sorrendet , és hogy melyik oldal mutat azaz hivatkozik a másik oldalra .
            !Miutan a programunk lefutott  kifogja dobni  számunkra a  4 weboldal megfelelő sorrendjét a pagerank keresési algoritmus alapján.
        </para>
         <programlisting language="c"><![CDATA[
         // nem sajat kód
         
#include <stdio.h>
#include <math.h>


void

kiir (double tomb[], int db)
{
  int i;

  for (i = 0; i < db; ++i)
    printf ("%f\n", tomb[i]);

}

double
tavolsag (double PR[], double PRv[], int n)

{

  double osszeg = 0.0;
  int i;
  for (i = 0; i < n; ++i)
    osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);

  return sqrt(osszeg);
}

int main(void){
  double L[4][4] = {

    {0.0, 0.0, 1.0 / 3.0, 0.0},
    {1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
    {0.0, 1.0 / 2.0, 0.0, 0.0},
    {0.0, 0.0, 1.0 / 3.0, 0.0}

  };

  double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
  double PRv[4] = { 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0 };

  int i, j;
  for (;;)
   {
      for (i = 0; i < 4; ++i)
	{
	  PR[i] = 0.0;
	  for (j = 0; j < 4; ++j)
	    PR[i] += (L[i][j] * PRv[j]);
	}
      if (tavolsag (PR, PRv, 4) < 0.00000001)

	break;
      for (i = 0; i < 4; ++i)

	PRv[i] = PR[i];
    }
  kiir (PR, 4);
  return 0;

}
}]]></programlisting>   


<figure>
            <title>PageRank : - Kép Wikipedia: </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="pic/asdfadfs.png" scale="70"/>
                </imageobject>
            </mediaobject>
        </figure>

    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para>
            Mielőtt belekezdünk a programban érdemes letisztázni hogy miről is kell beszénünk. Fontos megemlítenünk a primeket és  ikerprímeket hisz ezekről szól a feladat.
            Tehát prímeknek azokat a (természetes) számokat nevezzuk amelyeknek pontosan 2 osztóval rendelkeznek ilyen peldaul a 3 , az 5 vagy akár a 7 és a 11 is stb...! Ez a 2 osztó az egy Az egy és önmaguk .
            Kivetéleke közé sorohatjuk a 0 illetve a 1es szamot hisz ezekre igazak a feltételek viszont nem tartoznak a prím számok közé.
            Az Ikerprímek a prímeknek egy olyan esete amikor már tudunk 2 prímről és ezeknek a  prímeknek a különbsége kettő tehát például az 5 és a 7 vagy akár a 11 és a 13 stbb...
            Nagyon érdekes hogy még a prímekről mennyit hallunk az ikerprímek fogalma szinte ismeretlen az átlagembereknek.
            .  Gyakorlatilag szinte végtelen  ikerprímről beszélhetünk , generalhatunk , rengeteget ismerünk, alkalmazunk  ,Tehat a programunk veletlenszeruen generál számunkra prímeket . 
            Miutan ezzel vegzett elkezdi összeveti a megadott feltételek alapjan a prímeket . Megvizsgálja hogy mekkora az első és a második prím különbsége . Ha nem kettő akkor a program dolgozik tehat ugrik a kovetkező 2 primre és vizsgálja
            azokat még nem talal ikerprímet. Ha talal tehat a vizsgalat alapjan a kettő különbsége kettő lesz  . Eltarolja az adatokat a megfelelő helyekre  
            A program is ezen az elven mukodik megvizsgálja hogy az első és a második prímnek mekkora a külonbsége.Eltárolja az adatokata megfelelő helyekre  majd ezelből az adatokból reciprokokat képez , 
            összeadja őket és  visszaadja az értéket.Miutan megfelelő mennyiségü adatot gyüjtött a a program megfelelő müködéséhez a már számítógépes matekmatika és vizualizáció óráról is ismert  plot fuggvénnyel kirajzoltatja nekunk a megfelelő 
            eredményt.
        </para>
                 <programlisting language="c"><![CDATA[

// nem sajat kód         
stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")

}
}]]></programlisting>    
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            Ez egy nagyon érdekes televíziós elkepzelés . Több televíziós müsorban is megfigyelhető volt az évek alatt.
        Az elkepzeles szerint 3 különböző ajtó található es a jatek folyaman ezek közül  kell választanunk a megfelelőt , az egyik ajtó mögött egy nyeremény vagy egyéb érték  található a másik kettő ajtó mögötti tér viszont üres  !
        A játékos célja hogy eltalalja a megfelelő ajtót , azaz ,megnyerje a jatekot , értékes nyereményekkel legyen gazdagabb a jatek utan.
        . Tehat a jatekot magát egy musorvezető iranyítja az ő feladata nagyon fontos lesz . Az ő jelzésére kell a jatekosnak kivalasztani egy ajtót ..Miutan ez megtörtént
        A musorvezető kinyitja az egyik üres ajtót azaz most mar csak kettő ből kell eltalalni a megfelelő ajtót , tehat a legtobb ember szerint most mar 50%-50% esélyünk  van a nyerni jatekosként . Gyakorlatilag viszont ha a megvaltoztatjuk az eredetileg
        alkotott döntésünk és a fentmarad két ajtóból azt az ajtót választjuk amelyre eddig nem szavaztunk  2/3 esélyünk van a nyeremény megnyerésére 
        .A program elég sok random esetet  generál amelyekben kulonbozo variaciok és konbinaciok jatszódnak le
        . Meg kell hataroznunk az esetek  számát hogy ne a végtelenségig generalja az eseteket
        .Ezutan egy ciklussal vegig megyünk es megnezzuk a jatekok alltal adot eredményket  .Hogy éppen az adott jatekban ki kapott montot az ekkora kapott pontokat variaciokat konbinaciokat , eredményeket kiertekeljuk
        Majd az osszegzett eredményket kiiratjuk. 
        </para>
    
<programlisting language="c"><![CDATA[


// nem sajat kód         
kiserletek_szama=10000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }

    musorvezeto[i] = mibol[sample(1:length(mibol),1)]

}

nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}

valtoztatesnyer = which(kiserlet==valtoztat)


sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)

}
}]]></programlisting>   
<figure>
            <title>Monty Hall  Forrás:Wikipedia: </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="pic/Wikipedia2.png" scale="70"/>
                </imageobject>
            </mediaobject>
        </figure>
        
        </section>
</chapter>                
