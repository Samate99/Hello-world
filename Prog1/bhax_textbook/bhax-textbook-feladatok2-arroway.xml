<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Arroway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>OO szemlélet</title>
        <para>
		A módosított polártranszformációs normális generátor beprogramozása Java nyelven. Mutassunk rá,
hogy a mi természetes saját megoldásunk (az algoritmus egyszerre két normálist állít elő, kell egy
példánytag, amely a nem visszaadottat tárolja és egy logikai tag, hogy van-e tárolt vagy futtatni kell
az algot.) és az OpenJDK, Oracle JDK-ban a Sun által adott OO szervezés ua.!
https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_5.pdf (16-22 fólia)
Ugyanezt írjuk meg C++ nyelven is! (lásd még UDPROG repó: source/labor/polargen)

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        
        <para>
Tehat ha megnezzuk a  programunk ugy mukodik hogy megnezi hogy van e már előrre tárolt értékünk . Termeszetesen ha van tarolt érték 
akkor a program azzal dolgozik ha nincs akkor pedig keszít egyet . Vagyis pontosabban kettőt erteket keszít szamunka a metódus amelyek közül
az egyiket letarolja a masodikat meg visszaadja. és azzal vegzi el a számításokat
</para>
 <programlisting language="c"><![CDATA[
import java.util.Random;
import java.io.*;
import java.lang.Math;

public class PolarGen	{

  public final  static int RAND_MAX = 32767;
  private static boolean bExists;
  private double dValue;

  static Random cRandomGenerator = new Random();

  public PolarGen() { 		

	bExists = false;
	cRandomGenerator.setSeed(20); 	
  };

  public double PolarGet()	{

    	if (!bExists)
  {
		double u1, u2, v1, v2, w;
		
		do{

			u1 = cRandomGenerator.nextInt (RAND_MAX) / (RAND_MAX + 1.0); 
			u2 = cRandomGenerator.nextInt (RAND_MAX) / (RAND_MAX + 1.0);
			v1 = 2 * u1 - 1;
			v2 = 2 * u2 - 1;
			w = v1 * v1 + v2 * v2;
		    }
		    
		while (w > 1);
		double r = Math.sqrt ((-2 * Math.log (w)) / w);
		dValue = r * v2; 
		bExists = !bExists;
		return r * v1; 
	}
	else

	{
		bExists = !bExists; 
		return dValue;

	}

  };    

  public static void main(String args[])	{
    PolarGen cPolarGen = new PolarGen();
    double  dEredmeny = cPolarGen.PolarGet();
    System.out.println(dEredmeny);
  }

}]]></programlisting> 

        <para>
C++ valtozat
        </para>
        
 <programlisting language="c"><![CDATA[       
#include<cmath>
#include <cstdlib>
#include<ctime>

using namespace std;


class PolarGen {

public:
    PolarGen (){
        nincsTarolt = true;
        srand (time (NULL));
    }

    ~PolarGen(){
    }

    double kovetkezo ();


private:

    bool nincsTarolt;
    double tarolt;

};

double PolarGen::kovetkezo() {

    if (nincsTarolt) {
        double u1, u2, v1, v2, w;
        do {
            u1 = rand() / (RAND_MAX + 1.0);
            u2 = rand() / (RAND_MAX + 1.0);
            v1 = 2 * u1 - 1;
            v2 = 2 * u2 -1;
            w = v1 * v1 + v2 * v2;

        } while ( w > 1);
        double r = sqrt ((-2* log(w) / w));
        tarolt = r * v2;
        nincsTarolt = !nincsTarolt;

        return r * v1;

   }
    else {
        nincsTarolt = !nincsTarolt;
      return tarolt;
    }

}

int main(int argc, char** argv) {
    PolarGen pg;
    for (int i = 0; i < 10; i++)
        std::cout<<pg.kovetkezo()<<std::endl;
    return 0;
}
}]]></programlisting> 



    </section>        

    <section>
        <title>Homokozó</title>
        <para>
irjuk át az első védési programot (LZW binfa) C++ nyelvről Java nyelvre, ugyanúgy működjön!
Mutassunk rá, hogy gyakorlatilag a pointereket és referenciákat kell kiirtani és minden máris működik
(erre utal a feladat neve, hogy Java-ban minden referencia, nincs választás, hogy mondjuk egy
attribútum pointer, referencia vagy tagként tartalmazott legyen).
Miután már áttettük Java nyelvre, tegyük be egy Java Servletbe és a böngészőből GET-es kéréssel
(például a böngésző címsorából) kapja meg azt a mintát, amelynek kiszámolja az LZW binfáját!        
</para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  <link xlink:href='https://github.com/Samate99/Hello-world/blob/master/LZWBinFa.java'>https://github.com/Samate99/Hello-world/blob/master/LZWBinFa.java</link>               
        </para>
        <para>
A feladatunk hogy átírjuk a binfát java nyelvre .
Gyakorlatilag át kell írnunk  c kódban szereplő pointereket illetve referenciákat nem másra mint
javas referenciara  illetve át kell írnunk java szintaxisnak megfelelően a kódot .  . 
        </para>
    </section>  

    <section>
        <title>„Gagyi”</title>
        <para>
Az ismert formális
„<![CDATA[
while (x <= t && x >= t && t != x);
]]>” tesztkérdéstípusra adj a szokásosnál
(miszerint x, t az egyik esetben az objektum által hordozott érték, a másikban meg az objektum
referenciája) „mélyebb” választ, írj Java példaprogramot mely egyszer végtelen ciklus, más x, t
értékekkel meg nem! A példát építsd a JDK Integer.java forrására3
, hogy a 128-nál inkluzív objektum
példányokat poolozza!
</para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:   
            
        </para>
        <para>
            A szöveg alatt láthatunk 2 darab kódot láthatunk . Amelyekben szinte teljesen ugyanolyanok.
            Ezekeben csak 2 érték az x, és a t érték különböző. 
            Az első esetben láthatjuk hogy az x és a t érték jóval nagyobb mint a masodik esetben. A két szám nagyobb értéke azt generalja
           hogy  ebben az esetben a ciklus feltétele igaz lesz ez pedig előidéz szamunkra egy  végtelen ciklust. 
            Ez a folyamat  alap  integer osztálynak köszönhető ami alapból egy 2 érték közötti tartomány  amely nem mas mint  -128 és  127 között talalható .
            De mivel ez a 2 érték kívül esik az adott tartományon emiatt 
            a ciklus feltétele igaz lesz. Ezzel szemben ha megnezzuk a masodik esetet ahol a  2 szám bennevan ebben az osztályban mint ahogy látható 
            akkor természetesen a  a ciklusunk feltétele hamis lesz es így nem nem következik ugyanaz be mint az első esetben 
            tehat a ciklus feltétele nem igaz hanem hamis lesz tehat nem jön létre egy végtelen ciklus.
        </para>

  <programlisting language="c"><![CDATA[    
    public class gagyi {
      public static void main(String args[]){
 Integer x = 2001    ;
 Integer t = 2001    ; 
 System.out.print("A "+ "ciklus "+"kezdete\n"); 
 while(x<=t && x>=t && x!=t) 
{} 
System.out.println("A cilus vége");
}
]]></programlisting> 





    <programlisting language="c"><![CDATA[    
 public class gagyi {
public static void main(String args[])
{
Integer x = -21; 
Integer t =  21;
System.out.print("A "+ "ciklus "+"kezdete\n"); 
while(x<=t && x>=t && x!=t)
{} 
System.out.println("A cilus vége");
} 
}]]></programlisting> 


    </section>  

    <section>
        <title>Yoda</title>
        <para>
Írjunk olyan Java programot, ami java.lang.NullPointerEx-el leáll, ha nem követjük a Yoda
conditions-t! https://en.wikipedia.org/wiki/Yoda_conditions
</para>

        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
A yoda conditions alatt egy megfordított összehasonlítást értünk . 
Tehat ha egy alap esetet nezunk akkor valtozot hasonlítjuk .De itt a megvan fordítva és a valtozohoz hasonlítunk
. Igazabol ez végülis programozási szempontból mindegy hisz mindkét esetben elvileg mukodni fog a program..
De ha egy olyan valtozott hasonlítunk melynek erteke null akkor hibat kapunk. Nem is akarmilyet a java.lang.Nullpointer.ex
hibat ami a feladatunk.
 </para>
        <para>
          Ennek a kódnak a segítségével idézhetjuk elő a java.lang.nullpointer.ex hibát . 
          Pontosabban a 2. if esetében történik a hiba , mivel ott a valtozonk erteke nem mas mint null így hibát kapunk
        </para>
        
 <para> 
 <programlisting language="c"><![CDATA[ 
public class Yoda {

    public static void main(String[] args) {    
    String text = null;

      if ("text".equals(textext)) {
      }
      System.out.println("text".equals(text));

      textext = null;
      if (text.equals("text")) {
      }
      System.out.println("text".equals(text));

    }
}
}]]></programlisting> 

 </para>   
 
    </section>  
    <section>
        
        <title>Kódolás from scratch</title>
        <para>
Induljunk ki ebből a tudományos közleményből: http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/bbpalg.pdf és csak ezt tanulmányozva írjuk meg Java nyelven a BBP algoritmus megvalósítását!
Ha megakadsz, de csak végső esetben: https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitokjavat/apbs02.html#pi_jegyei (mert ha csak lemásolod, akkor pont az a fejlesztői élmény marad ki,
melyet szeretném, ha átélnél).
</para>

        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
A BBP algoritmus ki nem talalnak a BBP formulát hasznalja
melyet Simon Plouffe nevéhez köthetünk . Maga az algoritmus
a Pi számjegyeinek meghatarozására alkamas  . Tovabba ami még egyedibbé és érdekesebbé teszi a programot az nem mas mint az 
hogy nem feltetlenul az első helyről kaphatjuk meg a pi számjegyeit hanem egy alltalunk kivalaszott pozíciótól is lekérhetjuk a szamjegyeit.
        </para>
        
        

         package bpp;


 <programlisting language="c"><![CDATA[ 

 * PiBBP.java

public class PiBBP {
    public PiBBP(int d) {

    
        double d16Pi = 0.0d;
        double d16S1t = d16Sj(d, 1);
        double d16S4t = d16Sj(d, 4);
        double d16S5t = d16Sj(d, 5);
        double d16S6t = d16Sj(d, 6);

        d16Pi = 4.0d*d16S1t - 2.0d*d16S4t - d16S5t - d16S6t;
        d16Pi = d16Pi - StrictMath.floor(d16Pi);

        StringBuffer sb = new StringBuffer();
        Character hexaJegyek[] = {'A', 'B', 'C', 'D', 'E', 'F'};
    
        while(d16Pi != 0.0d) {
            int jegy = (int)StrictMath.floor(16.0d*d16Pi);
            if(jegy<10)
                sb.append(jegy);
            else
               sb.append(hexaJegyek[jegy-10]);
            d16Pi = (16.0d*d16Pi) - StrictMath.floor(16.0d*d16Pi);
        }
        d16PiHexaJegyek = sb.toString();
 }
    public double d16Sj(int d, int j) {

        double d16Sj = 0.0d;
        for(int k=0; k<=d; ++k)
            d16Sj += (double)n16modk(d-k, 8*k + j) / (double)(8*k + j);
        return d16Sj - StrictMath.floor(d16Sj);
    }
    public long n16modk(int n, int k) {
      int t = 1;
        while(t <= n)
            t *= 2;
        long r = 1;
        while(true) {
            if(n >= t) {
                r = (16*r) % k;
                n = n - t;
            }
            t = t/2;
           if(t < 1)
                break;
            r = (r*r) % k;
        }
        return r;
    }
    public String toString() {
        return d16PiHexaJegyek;

    }
    public static void main(String args[]) {        
        System.out.print(new PiBBP(1000000));
    }

}
}]]></programlisting> 
     <para>
         Ahogy lathatjuk a program d+1 helytol számítva adja vissza a Pi értékeit tehat.
     </para>
    </section>  	
        

</chapter>                
