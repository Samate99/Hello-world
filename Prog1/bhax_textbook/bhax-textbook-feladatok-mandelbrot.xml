<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
                
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href='https://github.com/Samate99/Hello-world/blob/master/Prog1/mandelpngt.c%2B%2B'>https://github.com/Samate99/Hello-world/blob/master/Prog1/mandelpngt.c%2B%2B</link>
        </para>
        <para>
            Első lépésként itt is fontos tisztázni hogy mi is az ugynevezett Mandelbrot halmaz . Ez gyakorlatilag egy a komplex szamsíkon talalt halamaz . 
            Felfedezését Benoit Mandelbrotnak köszönhetjük aki 1980ban találta meg . Tehetjük fel a kérdést hogy miért is fontosak szamunkra a komplex szamsíkon talalható számok ! Hát azert mert rengeteg olyan matematika 
            pelda es feladat van amelyekre egyéb számhalmazokban nem tudnánk választ vagy pontos választ adni. Ez az a szamhalmaz ahol az értelmezhetetlen feladatok értelmezhetőek es szinte minden problemat tudunk orvosolni.
            Mielott belekezdünk a kódok világát böngészni fontos kiemelni hogy a program megfelelő futtatásához a linbpng es a linbpng++ illetve a png++ telepítése nem elhanyagolható ! Tehat ezek nelkul az eredményünk nem lesz valós !
            Tehat a kódban lathatjuk hogy elorre meg kell adnunk a kepünk méretét jelen esetben ez egy 600x600as kép lesz. Tehat a programban létrehozunk egy rácsot amelyen kesobb kulonboző pontokat veszünk fel.
            A programban megfigyelhetunk 2 ciklust amelynek jelentős szerepe lesz a programban. Ha jól megfigyeljük lathatjuk hogy ez a 2 ciklus megy végig és számolja ki a megfelelő irányokba . Ezutan felfedezhetünk egy While ciklust is
            amely a rácspontok ellenorzesere szolgal . Ennek a segítéségvel állapítja meg a program hogy az elobb kiszamolt racspont rajta van e az elorre definialt szamsíkon. Ha rajta van akkor természetesen lementi az adatokat ha nincs rajta akkor pedig
            nyilvan tovabbhalad . Ezzel a módszerrel folyamatosan szamolja ki a racs egyre tobb és több pontjat . Miutan ezzel vegzett és feltöltötte a kep pixeleit a program a mar elorre megadott helyre létrehozza szamunkra ezt a csodás képet.
           Ezt a halmazt úgy tudjuk létrehozni hogy egy 4 oldalhosszúságú négyzetben lefektetünk egy rácsot . Kiszámoljuk hogy a rács pontjai mely komplex számoknak felelnek meg .  
        </para>
        <programlisting language="c"><![CDATA[Program T100

/ mandelpngt.c++
// Copyright (C) 2019
// Norbert Bátfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Version history
//
//  Mandelbrot png
//  Programozó Páternoszter/PARP
//   https://www.tankonyvtar.hu/hu/tartalom/tamop412A/2011-0063_01_parhuzamos_prog_linux
//
//  https://youtu.be/gvaqijHlRUs
//

#include <iostream>
#include "png++/png.hpp"
#include <sys/times.h>



#define MERET 600
#define ITER_HAT 32000

void
mandel (int kepadat[MERET][MERET]) {


    // Mérünk időt (PP 64)
    clock_t delta = clock ();
    // Mérünk időt (PP 66)
  sruct tms tmsbuf1, tmsbuf2;
    times (&tmsbuf1);



    // számítás adatai
    float a = -2.0, b = .7, c = -1.35, d = 1.35;
    int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;







    // a számítás
    float dx = (b - a) / szelesseg;
    float dy = (d - c) / magassag;
    float reC, imC, reZ, imZ, ujreZ, ujimZ;
    // Hány iterációt csináltunk?



    int iteracio = 0;

    // Végigzongorázzuk a szélesség x magasság rácsot:

    for (int j = 0; j < magassag; ++j)
    {
       //sor = j;
        for (int k = 0; k < szelesseg; ++k)
        {
            // c = (reC, imC) a rács csomópontjainak
            // megfelelő komplex szám
            reC = a + k * dx;
            imC = d - j * dy;
            // z_0 = 0 = (reZ, imZ)
            reZ = 0;
            imZ = 0;

            iteracio = 0;
            // z_{n+1} = z_n * z_n + c iterációk
            // számítása, amíg |z_n| < 2 vagy még
            // nem értük el a 255 iterációt, ha
            // viszont elértük, akkor úgy vesszük,
            // hogy a kiinduláci c komplex számra
            // az iteráció konvergens, azaz a c a
            // Mandelbrot halmaz eleme

           while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
            {
               // z_{n+1} = z_n * z_n + c
               ujreZ = reZ * reZ - imZ * imZ + reC;
                ujimZ = 2 * reZ * imZ + imC;
                reZ = ujreZ;
                imZ = ujimZ;
                ++iteracio;

            }

            kepadat[j][k] = iteracio;
        }
    }

    times (&tmsbuf2);

    std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
              + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;
    delta = clock () - delta;
    std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}
int
main (int argc, char *argv[])

{
    if (argc != 2)
    {
        std::cout << "Hasznalat: ./mandelpng fajlnev";
        return -1;

    }

    int kepadat[MERET][MERET];
    mandel(kepadat);

    png::image < png::rgb_pixel > kep (MERET, MERET);
    for (int j = 0; j < MERET; ++j)
    {
        //sor = j;
        for (int k = 0; k < MERET; ++k)
        {
            kep.set_pixel (k, j,
                          png::rgb_pixel (255 -

                                           (255 * kepadat[j][k]) / ITER_HAT,
                                           255 -
                                         (255 * kepadat[j][k]) / ITER_HAT,
                                           255 -
                                          (255 * kepadat[j][k]) / ITER_HAT));

        }
    }

    kep.write (argv[1]);
    std::cout << argv[1] << " mentve" << std::endl;



}


}]]></programlisting>  


<figure>
            <title> Mandelbrot Forrás :Wikipedia: </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="pic/300px-Mandelset_hires.png" scale="120"/>
                </imageobject>
            </mediaobject>
        </figure>
        
        
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
                
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:     <link xlink:href=' https://github.com/Samate99/Hello-world/blob/master/Prog1/mandel.cpp'> https://github.com/Samate99/Hello-world/blob/master/Prog1/mandel.cpp</link>     
        </para>
        <para>
            Tehat az előző feladatban mar beszéltünk a Mandelbrot halmazról illetve a komplex szamsíkról . Itt külön nem emelném ki a történetét illetve a komplex szamsík és a halmaz jelentőségét.
            A programunk egyszeruen kifogja számolni az előzőhőz hasonlóan a mandelbrot halmazt viszont ebben az esetben az std:complex osztályt fogja segítéségük hívni a feladathoz .
            Tehat itt is kiemelném hogy ehez a programhoz is kellenek a mar fentebb említett könyvtárak illetve egyéb eszközöt telepítése hisz nélkülük ez a program se fog megfelelően lefutni.
            Szóval mivel itt külön az std:complex osztalyt kell hasznalnunk erdemes első lépésként ezt importalnunnk a programba. Ahogy az előző feladatban ebben is előrre meg kell adnunk azaz definialnunk kell a kép adatik
            A program hasonló képpen mukodik mint az előző program tehat ebben az esetben is for ciklusok segítségével megy végig a pontokon , egy while ciklussal ellenorzi magat illetve tolti fel a jónak talalt pontokat. 
            Fontos kiemelni hogy a programnak van egy része amely folyamatosan kiirja szamunkra hogy hany %nál jár a programunk.
            Végül de nem utolsó sorban szeretnem kiemelni hogy az előzővel ellentétben az itt hasznalunk szinezest emiatt ez a csodas  kép egy szines kép lesz.
            Ha mindent jól csinaltunk mindent megfelelően leírtunk , deklaraltunk akkor a program lefutása utan itt is egy képpel lehetünk gazdagabbak valamelyik meghajtón .
        </para>
        <programlisting language="c"><![CDATA[Program T100
// Verzio: 3.1.2.cpp
// Forditas:
// g++ 3.1.2.cpp -lpng -O3 -o 3.1.2
// Futtatas:
// ./3.1.2 mandel.png 1920 1080 2040 -0.01947381057309366392260585598705802112818 -0.0194738105725413418456426484226540196687 0.7985057569338268601555341774655971676111 0.798505756934379196110285192844457924366
// ./3.1.2 mandel.png 1920 1080 1020 0.4127655418209589255340574709407519549131 0.4127655418245818053080142817634623497725 0.2135387051768746491386963270997512154281 0.2135387051804975289126531379224616102874
// Nyomtatas:
// a2ps 3.1.2.cpp -o 3.1.2.cpp.pdf -1 --line-numbers=1  --left-footer="BATF41 HAXOR STR34M" --right-footer="https://bhaxor.blog.hu/" --pro=color
// ps2pdf 3.1.2.cpp.pdf 3.1.2.cpp.pdf.pdf
//
//
// Copyright (C) 2019
// Norbert Bátfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.


#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )

{

  int szelesseg = 1920;
  int magassag = 1080;

  int iteraciosHatar = 255;

  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;


  if ( argc == 9 )
    {

      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );

      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else

    {

      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;
  std::cout << "Szamitas\n";
  // j megy a sorokon



  for ( int j = 0; j < magassag; ++j )
    {

      // k megy az oszlopokon
      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;

          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {

             z_n = z_n * z_n + c
              ++iteracio;
            }
          kep.set_pixel ( k, j,

                         png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );


        }
      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }
  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}

}]]></programlisting>  
        
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
            Tehetjük fel hogy honnan is erednek a biomorfok . Hát gyakorlatilag egy Hiba , tévedés  miatt talaltak ra ezekre mint egyéb más dolgokra.
            Clifford Pickover volt az személy aki megpróbálta a Julia halmazokat kirajzoltatni sajnos az alltala megírt program több helyen is hibákkal rendelkezik de szerencséjére ez hozta meg számára sikert
            hisz ezzel a programmal tudta kirajzoltatni a biomorfok első "csapatát"
            Tehat itt is rajzoltatni fogunk valamit kiemelném hogy itt is fontos a megfelelő dolgok telepítése hisz ezek nélkül megint rossz eredményhez juthatunk .
            Kiemelném a julia halmazt hisz ez egy a Mandelbrot halmazhoz hasonló halmaz azzal a kivetellel hogy ami a mandelbrót állandó az a Julia halmazban inkabb valtozó . 
            Tehat itt is egy szamolás fog kovetkezni az előző példához hasonlóan itt is rácspontokat fog a program számunkra szamolni . Kisebb-Nagyobb eltérésekkel s at fogjuk adni illetve ki fogjuk szamolni az adatokat 
            illetve fel fogjuk tolteni a racspontokat . Miutan feltolttuk a racspontokat és megadtuk a valtozókat illetve a képünk méretét itt is egy PNG formátumú alkotással lehetünk boldogabbak .
            
        </para>  
        <programlisting language="c"><![CDATA[Program T100
// Verzio: 3.1.3.cpp
// Forditas:
// g++ 3.1.3.cpp -lpng -O3 -o 3.1.3
// Futtatas:
// ./3.1.3 bmorf.png 800 800 10 -2 2 -2 2 .285 0 10
// Nyomtatas:
// a2ps 3.1.3.cpp -o 3.1.3.cpp.pdf -1 --line-numbers=1  --left-footer="BATF41 HAXOR STR34M" --right-footer="https://bhaxor.blog.hu/" --pro=color
// ps2pdf 3.1.3.cpp.pdf 3.1.3.cpp.pdf.pdf
// 
// BHAX Biomorphs
// Copyright (C) 2019
// Norbert Batfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Version history
//
// https://youtu.be/IJMbgRzY76E
// See also https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf
//

#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";

    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}

       
}]]></programlisting>  

        <figure>
            <title> Julia halmaz Forrás :www.t-es-t.h </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="pic/julia4.png" scale="70"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás Forrása : <link xlink:href=' https://github.com/Samate99/Hello-world/blob/master/Prog1/cuda'> https://github.com/Samate99/Hello-world/blob/master/Prog1/cuda</link> 
        </para>
        <para>
            Hát ehez a feladathoz szükségünk lesz egy megfelelő grafikus kartyahoz amit az Nvidiank kell legyartani ellenkezo esetben nemhiszem hogy kepesek leszünk elvegezni a muveleteket
            Ebben az esetben is a Mandelbrot halmazt fogjuk szamolni viszont a egy elég érdekes számítási platformon,
            Tehat ahoz hogy a program lefusson ujabb Generaciós NVIDIA kartyara lesz szükségünk amely kepes a CUDA rendszer kezeléséhez
            Ahoz hogy ez mukodjon még ilyen korulmenyek között érdemes ellatogatni az NVDIA oldalara ahol rengeteg uj informacióval és egyéb szoftverrel lehetünk
            gazdagabbak illetve szerintem érdemes 1-2 egyéb oldalról is szarmazó cikket elolvasni a CUDA lehetőségei kapcsan.
            Maga a Cuda egy elég érdekes az NVIDIA alltal létrehozott platform. Nepszeruseget annal koszonheti hogy ezzel nagyon nagy mertekben tudjuk kihasznalni a videokartyank
            erőforrásait . Tehat a grafikus kartyank legtobb magjat szalat kiváló százalékban leszünk képesek kihasználni.
            Fontos kiemelni hogy ez a program hasonló elven mukodik . Itt is feltoltjuk a racspontokat a megfelelő szamításokkal illetve itt is kirajzoltatunk egy képet a számítógépünkre
        </para>
        <programlisting language="c"><![CDATA[Program T100
// mandelpngc_60x60_100.cu
// Copyright (C) 2019
// Norbert Bátfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
//  at under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Version history
//
//  Mandelbrot png
//  Programozó Páternoszter/PARP
//   https://www.tankonyvtar.hu/hu/tartalom/tamop412A/2011-0063_01_parhuzamos_prog_linux
//
// https://youtu.be/gvaqijHlRUs
//



#include <png++/image.hpp>
#include <png++/rgb_pixel.hpp>
#include <sys/times.h>
#include <iostream>



#define MERET 600
#define ITER_HAT 32000





__device__ int
mandel (int k, int j)

{
  // Végigzongorázza a CUDA a szélesség x magasság rácsot:
  // most eppen a j. sor k. oszlopaban vagyunk


  // számítás adatai
  float a = -2.0, b = .7, c = -1.35, d = 1.35;
  int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;



  // a számítás
  float dx = (b - a) / szelesseg;
  float dy = (d - c) / magassag;
  float reC, imC, reZ, imZ, ujreZ, ujimZ;

  

  // Hány iterációt csináltunk?
  int iteracio = 0;


  // c = (reC, imC) a rács csomópontjainak
  // megfelelő komplex szám
  reC = a + k * dx;
  imC = d - j * dy;
  // z_0 = 0 = (reZ, imZ)
  reZ = 0.0;
  imZ = 0.0;
  iteracio = 0;

  // z_{n+1} = z_n * z_n + c iterációk
  // számítása, amíg |z_n| < 2 vagy még
  // nem értük el a 255 iterációt, ha
  // viszont elértük, akkor úgy vesszük,
  // hogy a kiinduláci c komplex számra
  // az iteráció konvergens, azaz a c a
  // Mandelbrot halmaz eleme

  while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {
      // z_{n+1} = z_n * z_n + c
      ujreZ = reZ * reZ - imZ * imZ + reC;
      ujimZ = 2 * reZ * imZ + imC;
      reZ = ujreZ;
      imZ = ujimZ;



      ++iteracio;

    }

  return iteracio;
}

/*
__global__ void
mandelkernel (int *kepadat)

{

  int j = blockIdx.x;
  int k = blockIdx.y;

  kepadat[j + k * MERET] = mandel (j, k);
}

*/

__global__ void

mandelkernel (int *kepadat)

{
  int tj = threadIdx.x;
  int tk = threadIdx.y;

 
  int j = blockIdx.x * 10 + tj;
  int k = blockIdx.y * 10 + tk;

  kepadat[j + k * MERET] = mandel (j, k);
}


void
cudamandel (int kepadat[MERET][MERET])


{

  int *device_kepadat;
  cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));



  // dim3 grid (MERET, MERET);
  // mandelkernel <<< grid, 1 >>> (device_kepadat);


  dim3 grid (MERET / 10, MERET / 10);
  dim3 tgrid (10, 10);
  mandelkernel <<< grid, tgrid >>> (device_kepadat);    

  cudaMemcpy (kepadat, device_kepadat,
	      MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
  cudaFree (device_kepadat);

}

int
main (int argc, char *argv[])

{

  // Mérünk időt (PP 64)
  clock_t delta = clock ();
  // Mérünk időt (PP 66)
  struct tms tmsbuf1, tmsbuf2;
  times (&tmsbuf1);

  if (argc != 2)
    {
      std::cout << "Hasznalat: ./mandelpngc fajlnev";
      return -1;
    }


  int kepadat[MERET][MERET];
  cudamandel (kepadat);

  png::image < png::rgb_pixel > kep (MERET, MERET);
  for (int j = 0; j < MERET; ++j)
    {
      //sor = j;
      for (int k = 0; k < MERET; ++k)

	{
	  kep.set_pixel (k, j,
			 png::rgb_pixel (255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
				  (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT));
	}
    }
  kep.write (argv[1]);

  std::cout << argv[1] << " mentve" << std::endl;
  times (&tmsbuf2);
  std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;


  delta = clock () - delta;
  std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;


}

}]]></programlisting>  


        <figure>
            <title> CUDA  Forrás: NVIDIA Developer </title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="pic/LLVM_Compiler_structure.png" scale="70"/>
                </imageobject>
            </mediaobject>
        </figure>
        
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
            
        <para>
            Megoldás forrása: <link xlink:href='https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/Qt/Frak/'> https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/Qt/Frak/</link>  
        </para>

        <para>
            Megoldás videó: 
        </para>
        <para>
            A feladat megfelelő megoldásához szükségünk lesz tobb csomag telepítésére többek között a libqt4-dev csomagra is .
            Ahogy már ismerjek ezt folyamatot a qmake parancsal letre kell hoznuink a makefilet es mint ahogy eddig is tettük a Makefileos feladatok esetbéne le kell futtatnunk
            Ha a telepítések és a futtatások sikeresek voltak 4 abalkot fogunk kapni . Mind a 4 képen ugyanaz tekinthető meg . Az egyik kepen az eredeti kepet lathatjuk
            a maradek 3 kepen pedig erről a képről bezoomolt kepeket tekinthetünk meg. Kiemelném hogy a program nem egyetlen egy fajból hanem összesen 6 fajlból áll.
            Mindegyik fajlnak fontos szerepe van van amelyik a mandelbrot halmaz kirajzolásában van szerepe van emlyik van amelyik csak osztalyokat tartalmaz viszont a megfelelő mukodéshez az osszesre van szükségünk
        </para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
            <link xlink:href=' https://sourceforge.net/p/udprog/code/ci/master/tree/source/labor/Qt/Frak/'> https://github.com/Samate99/Hello-world/blob/master/Prog1/nagyito.java</link> 
        </para>
        <para>
            Az előző feladathoz nagyon hasonló feladatot kaptunk. Az előzőhez hasonlóan ez is ki fog szamunkra rajzolni egy kepet . Illetve ez a kep is egy Mandelbrot halmaz lesz.
            Ebben az esetben is fontos a megfelelő fajlok , csomagok telepítése mert a program megfelelő futásához elengedhetetlenek.
            Magát a halmazt szinte ugyanugy hozza létre mint a c++ esetében az eltérő változás a Zoomban tekinthető hisz ebben az esetben
            ez interaktív lesz . Az eger segítéségvel tudunk kijelolni részeket majd ezekbol a reszekbol kapunk uj kepet. Az előzőhoz hasonlóan itt is egy pillanatkeppel lehetunk gazdagabbak
            ,de az előzővel ellentétben nem arról van szó hogy előrre megadott kepeket kapunk hanem mi valaszthatjuk ki hogy a mandelbrot halmaz eppen melyik szegletére vagyunk kivancsiak.
        </para>
        
        <programlisting language="c"><![CDATA[Program T100

 * MandelbrotHalmazNagyító.java
 *
 * DIGIT 2005, Javat tanítok
 * Bátfai Norbert, nbatfai@inf.unideb.hu
 
 */
/**
 * A Mandelbrot halmazt nagyító és kirajzoló osztály.
 *
 * @author Bátfai Norbert, nbatfai@inf.unideb.hu
 * @version 0.0.1
 */


public class MandelbrotHalmazNagyító extends MandelbrotHalmaz {


    /** A nagyítandó kijelölt területet bal felső sarka. */
    private int x, y;
    /** A nagyítandó kijelölt terület szélessége és magassága. */
    private int mx, my;
    /**
     * Létrehoz egy a Mandelbrot halmazt a komplex síkon
     * [a,b]x[c,d] tartománya felett kiszámoló és nygítani tudó
     * <code>MandelbrotHalmazNagyító</code> objektumot.
     *
     * @param      a              a [a,b]x[c,d] tartomány a koordinátája.
     * @param      b              a [a,b]x[c,d] tartomány b koordinátája.
     * @param      c              a [a,b]x[c,d] tartomány c koordinátája.
     * @param      d              a [a,b]x[c,d] tartomány d koordinátája.
     * @param      szélesség      a halmazt tartalmazó tömb szélessége.
     * @param      iterációsHatár a számítás pontossága.



     */

    public MandelbrotHalmazNagyító(double a, double b, double c, double d,

            int szélesség, int iterációsHatár) {
        // Az ős osztály konstruktorának hívása
        super(a, b, c, d, szélesség, iterációsHatár);

        setTitle("A Mandelbrot halmaz nagyításai");

        // Egér kattintó elemények feldolgozása:

        addMouseListener(new java.awt.event.MouseAdapter() {

            // Egér kattintással jelöljük ki a nagyítandó területet
            // bal felső sarkát:

            public void mousePressed(java.awt.event.MouseEvent m) {

                // A nagyítandó kijelölt területet bal felső sarka:

                x = m.getX();
                y = m.getY();

                mx = 0;
                my = 0;

                repaint();

            }

            // Vonzolva kijelölünk egy területet...
            // Ha felengedjük, akkor a kijelölt terület

            // újraszámítása indul:

            public void mouseReleased(java.awt.event.MouseEvent m) {
                double dx = (MandelbrotHalmazNagyító.this.b
                        - MandelbrotHalmazNagyító.this.a)
                        /MandelbrotHalmazNagyító.this.szélesség;

                double dy = (MandelbrotHalmazNagyító.this.d

                        - MandelbrotHalmazNagyító.this.c)
                        /MandelbrotHalmazNagyító.this.magasság;
                // Az új Mandelbrot nagyító objektum elkészítése:

                new MandelbrotHalmazNagyító(MandelbrotHalmazNagyító.this.a+x*dx,
                        MandelbrotHalmazNagyító.this.a+x*dx+mx*dx,
                        MandelbrotHalmazNagyító.this.d-y*dy-my*dy,
                        MandelbrotHalmazNagyító.this.d-y*dy,

                        600,

                        MandelbrotHalmazNagyító.this.iterációsHatár);

            }

        });

        // Egér mozgás események feldolgozása:

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            // Vonszolással jelöljük ki a négyzetet:
            public void mouseDragged(java.awt.event.MouseEvent m) {
                // A nagyítandó kijelölt terület szélessége és magassága:

                mx = m.getX() - x;
                my = m.getY() - y;
                repaint();
            }
        });

    }

    /**

     * Pillanatfelvételek készítése.
     */

    public void pillanatfelvétel() {
        // Az elmentendő kép elkészítése:
        java.awt.image.BufferedImage mentKép =

                new java.awt.image.BufferedImage(szélesség, magasság,
                java.awt.image.BufferedImage.TYPE_INT_RGB);

        java.awt.Graphics g = mentKép.getGraphics();
        g.drawImage(kép, 0, 0, this);
        g.setColor(java.awt.Color.BLUE);



        g.drawString("a=" + a, 10, 15);
        g.drawString("b=" + b, 10, 30);
        g.drawString("c=" + c, 10, 45);
        g.drawString("d=" + d, 10, 60);
        g.drawString("n=" + iterációsHatár, 10, 75);

        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }        
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
        g.dispose();        
        // A pillanatfelvétel képfájl nevének képzése:



        StringBuffer sb = new StringBuffer();
        sb = sb.delete(0, sb.length());
        sb.append("MandelbrotHalmazNagyitas_");
        sb.append(++pillanatfelvételSzámláló);
        sb.append("_");

        // A fájl nevébe belevesszük, hogy melyik tartományban
        // találtuk a halmazt:
        sb.append(a);
        sb.append("_");
        sb.append(b);
        sb.append("_");
        sb.append(c);
        sb.append("_");
        sb.append(d);
        sb.append(".png");
        // png formátumú képet mentünk
        try {
            javax.imageio.ImageIO.write(mentKép, "png",
                    new java.io.File(sb.toString()));
        } catch(java.io.IOException e) {
            e.printStackTrace();
        }
    }    

    /**
     * A nagyítandó kijelölt területet jelző négyzet kirajzolása.
     */
    public void paint(java.awt.Graphics g) {
        // A Mandelbrot halmaz kirajzolása
         g.drawImage(kép, 0, 0, this);

        // Ha éppen fut a számítás, akkor egy vörös
        // vonallal jelöljük, hogy melyik sorban tart:         
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }         
        // A jelző négyzet kirajzolása:
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
    }

    /**

     * Példányosít egy Mandelbrot halmazt nagyító obektumot.
     */
    public static void main(String[] args) {

        // A kiinduló halmazt a komplex sík [-2.0, .7]x[-1.35, 1.35]
        // tartományában keressük egy 600x600-as hálóval és az
        // aktuális nagyítási pontossággal:
        new MandelbrotHalmazNagyító(-2.0, .7, -1.35, 1.35, 600, 255);

    }

}            
}]]></programlisting>  
    </section>

</chapter>                
